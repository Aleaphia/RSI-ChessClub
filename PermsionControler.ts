namespace Permision
{
	export interface IPermision
	{
		admin: boolean;
		editPlayers: boolean;
		pairRounds: boolean;
		groups: boolean;
	}

	export interface IPagePermisions
	{
		[sheetName: string]: (permision: IPermision) => boolean;
	}

	var _globalPagePermisions: IPagePermisions;

	function pagePermisions()
	{
		if(!_globalPagePermisions)
		{
			_globalPagePermisions = {};
			_globalPagePermisions[CONST.pages.groupTable.name] = p => p.groups;
			_globalPagePermisions[CONST.pages.history.name] = p => p.editPlayers || p.pairRounds;
			_globalPagePermisions[CONST.pages.mainPage.active] = _globalPagePermisions[CONST.pages.mainPage.master] = p => p.editPlayers;
			_globalPagePermisions[CONST.pages.permisions.name] = p => p.admin;
			_globalPagePermisions[CONST.pages.updatePlayer.name] = p => p.editPlayers;
		}

		return _globalPagePermisions;
	}

	//TODO finish dynamic page permsions
	/** WORK IN PROGESS */
	export function setPagePermisions()
	{
		let users = FrontEnd.PermisionPage.getPermisions();
		let pages = pagePermisions();

		for(let pageName in pages)
		{
			let validator = pages[pageName];

			let sheet = SpreadsheetApp.getActive().getSheetByName(pageName);
			let protection = sheet.getProtections(SpreadsheetApp.ProtectionType.SHEET)[0];
			if(!protection)
				protection = sheet.protect().setDescription("Generated by robot").setDomainEdit(false);
			let currentUsers = protection.getEditors();

			for(let user in users)
			{
				let permision = users[user].permisions;


			}
		}
	}

	export function doIHavePermsion(permisionValidator: (permision: IPermision) => boolean)
	{
		let user = Session.getActiveUser().getEmail();
		let permisions = FrontEnd.PermisionPage.getPermisions();
		let me = permisions[user];

		//I HAVE ALL THE POWER!
		//needed for time based triggers that I create.
		if(user.toLowerCase() === 'benji@altmansoftwaredesign.com')
			return true;

		if(!me)
			return false;

		return permisionValidator(me.permisions);
	}

	export function validatePermision(permisionValidator: (permision: IPermision) => boolean)
	{
		if(doIHavePermsion(permisionValidator) == false)
			throw new Error("You do not have permision to do this.");
	}

	export function updatePagePermisions()
	{
		let permisions = FrontEnd.PermisionPage.getPermisions();

	}
}